using System.IO;
using Core.Serialization;
using Core.Serialization.RocketLeague;
using Core.Test.TestUtilities;
using Core.Types;
using FluentAssertions;
using Xunit;

namespace Core.Tests;

public class VersionDetectorTests
{
    private readonly IStreamSerializer<FileSummary> _serializer;
    private readonly string RLCompressedFile = @"TestData\RocketPass_Premium_T_SF.upk";

    private readonly byte[] RLCoreHeader =
    {
        0xC1, 0x83, 0x2A, 0x9E, 0x64, 0x03, 0x20, 0x00, 0x3D, 0xE6, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00,
        0x4E, 0x6F, 0x6E, 0x65, 0x00, 0x88, 0x02, 0xA8, 0x22, 0xB7, 0x06, 0x00, 0x00, 0x8D, 0x00, 0x00,
        0x00, 0xF9, 0x09, 0x00, 0x00, 0x28, 0xD8, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0xF8, 0xD5, 0x00,
        0x00, 0x30, 0xA6, 0x03, 0x00, 0x30, 0xA6, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0xC9, 0x9A, 0x60, 0xD0, 0x4F, 0x3D, 0x41, 0x9E, 0x02, 0xAA,
        0xC5, 0x5B, 0x1B, 0xA0, 0x2C, 0x01, 0x00, 0x00, 0x00, 0xF9, 0x09, 0x00, 0x00, 0xB7, 0x06, 0x00,
        0x00, 0x33, 0x0A, 0x00, 0x00, 0x91, 0x2A, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0xB6, 0xC6, 0x82, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0xF1, 0x3F, 0x00, 0x00, 0xA3, 0xA5, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00
    };


    private readonly byte[] RLUncompressedCoreHeader =
    {
        0xC1, 0x83, 0x2A, 0x9E, 0x64, 0x03, 0x20, 0x00, 0x3D, 0xE6, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00,
        0x4E, 0x6F, 0x6E, 0x65, 0x00, 0x88, 0x02, 0xA8, 0x22, 0xB7, 0x06, 0x00, 0x00, 0x8D, 0x00, 0x00,
        0x00, 0xF9, 0x09, 0x00, 0x00, 0x28, 0xD8, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0xF8, 0xD5, 0x00,
        0x00, 0x30, 0xA6, 0x03, 0x00, 0x30, 0xA6, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0xC9, 0x9A, 0x60, 0xD0, 0x4F, 0x3D, 0x41, 0x9E, 0x02, 0xAA,
        0xC5, 0x5B, 0x1B, 0xA0, 0x2C, 0x01, 0x00, 0x00, 0x00, 0xF9, 0x09, 0x00, 0x00, 0xB7, 0x06, 0x00,
        0x00, 0x33, 0x0A, 0x00, 0x00, 0x91, 0x2A, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0xB6, 0xC6, 0x82, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0xF1, 0x3F, 0x00, 0x00, 0xA3, 0xA5, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00
    };

    private readonly string RLUnCompressedFile = @"TestData\RocketPass_Premium_T_SF_decrypted.upk";

    private readonly string UDKCoreFile = @"TestData/UDK/Core.u";

    private readonly byte[] UDKCoreHeader =
    {
        0xC1, 0x83, 0x2A, 0x9E, 0x64, 0x03, 0x00, 0x00, 0x14, 0x29, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00,
        0x4E, 0x6F, 0x6E, 0x65, 0x00, 0x01, 0x00, 0x20, 0x00, 0x90, 0x03, 0x00, 0x00, 0x81, 0x00, 0x00,
        0x00, 0x62, 0x06, 0x00, 0x00, 0x1C, 0x5B, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0xEC, 0x58, 0x00,
        0x00, 0x24, 0x0D, 0x02, 0x00, 0x14, 0x29, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xA7, 0x7A, 0x8F, 0xDC, 0x5E, 0x5C, 0x4A, 0x94, 0xC2, 0x56,
        0x64, 0x38, 0xDC, 0x42, 0xB1, 0x01, 0x00, 0x00, 0x00, 0x62, 0x06, 0x00, 0x00, 0x90, 0x03, 0x00,
        0x00, 0x62, 0x06, 0x00, 0x00, 0xF7, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0xED, 0x5A, 0x44, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00
    };

    public VersionDetectorTests()
    {
        _serializer = SerializerHelper.GetSerializerFor<FileSummary>(typeof(FileSummary));
    }


    [Fact]
    public void GetBuildOfStreamTest_UDKCoreBytes_ReturnEmptyVersion_()
    {
        // Arrange
        var stream = new MemoryStream(UDKCoreHeader);

        // Act
        var version = VersionDetector.GetBuildOfStream(stream);


        // Assert 
        version.Should().Be("");
    }

    [Fact]
    public void GetBuildOfStreamTest_RLCoreBytes_ReturnRLBaseVersion_()
    {
        // Arrange
        var stream = new MemoryStream(RLCoreHeader);

        // Act
        var version = VersionDetector.GetBuildOfStream(stream);


        // Assert 
        version.Should().Be(RocketLeagueBase.FileVersion);
    }

    [Fact]
    public void GetBuildOfStreamTest_RLCoreUncompressedBytes_ReturnRLBaseVersion_()
    {
        // Arrange
        var stream = new MemoryStream(RLUncompressedCoreHeader);

        // Act
        var version = VersionDetector.GetBuildOfStream(stream);


        // Assert 
        version.Should().Be(RocketLeagueBase.FileVersion);
    }

    [Fact]
    public void GetBuildOfFileTest_UDK_ReturnsEmpty()
    {
        // Act
        var version = VersionDetector.GetBuildOfFile(UDKCoreFile);


        // Assert 
        version.Should().Be("");
    }

    [Fact]
    public void GetBuildOfFileTest_RLFile_ReturnsRLBaseVersion()
    {
        // Act
        var version = VersionDetector.GetBuildOfFile(RLCompressedFile);


        // Assert 
        version.Should().Be(RocketLeagueBase.FileVersion);
    }

    [Fact]
    public void GetBuildOfFileTest_RLDecryptedFile_ReturnsRLBaseVersion()
    {
        // Act
        var version = VersionDetector.GetBuildOfFile(RLUnCompressedFile);


        // Assert 
        version.Should().Be(RocketLeagueBase.FileVersion);
    }
}